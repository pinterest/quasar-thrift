apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

group                = "com.pinterest"
version              = "0.1-SNAPSHOT"
status               = "integration"
description          = "Thrift integration with the Quasar libraries"
ext.url              = "https://github.com/pinterest/quasar-thrift"
ext.vendor           = "Pinterest.com"
ext.licenseName1     = "The Apache License, Version 2.0"
ext.licenseUrl1      = "http://www.apache.org/licenses/LICENSE-2.0"
ext.scmUrl           = "https://github.com/pinterest/quasar-thrift"
ext.scmConnection    = "https://github.com/pinterest/quasar-thrift.git"
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

if (!project.hasProperty("sonatypeUsername") || !project.hasProperty("sonatypePassword")) {
    println "sonatype username or password not set"
    ext.sonatypeUsername = ""
    ext.sonatypePassword = ""
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'co.paralleluniverse', name: 'quasar-core', version: '0.7.0'
    compile group: 'org.apache.thrift', name: 'libthrift', version: '0.9.1'
}

classes {
    doFirst {
        ant.taskdef(name: 'scanSuspendables',
                    classname: 'co.paralleluniverse.fibers.instrument.SuspendablesScanner',
                    classpath: "build/classes/main:build/resources/main:${configurations.runtime.asPath}")
        ant.scanSuspendables(auto: true,
                             suspendablesFile: "$sourceSets.main.output.resourcesDir/META-INF/suspendables",
                             supersFile: "$sourceSets.main.output.resourcesDir/META-INF/suspendable-supers",
                             append: true) {
            fileset(dir: sourceSets.main.output.classesDir)
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment -> signing.signPom(deployment) }

            repository(
                url: (isReleaseVersion ?
                            "https://oss.sonatype.org/service/local/staging/deploy/maven2" :
                            "https://oss.sonatype.org/content/repositories/snapshots")) {
                // user and password taken from ~/.gradle/gradle.properties
                authentication(userName: project.sonatypeUsername, password: project.sonatypePassword)
           }
           pom.project {
               name project.name
               packaging 'jar'
               description project.description
               url project.url
               scm {
                   url project.scmUrl
                   connection project.scmConnection
                   developerConnection project.scmConnection
               }
               licenses {
                   license {
                       name project.licenseName1
                       url project.licenseUrl1
                       distribution 'repo'
                   }
               }
               developers {
                    developer {
                        id 'charles.gordon'
                        name 'Charles Gordon'
                    }
               }
           }
        }
    }
}
